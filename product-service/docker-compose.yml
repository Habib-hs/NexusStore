version: '3.8'

# ----------------------------
# Networks - for isolation
# ----------------------------
networks:
  product-network:
    driver: bridge
  db-network:
    driver: bridge
  monitoring-network:
    driver: bridge

# ----------------------------
# Volumes - for persistence
# ----------------------------
volumes:
  mongodb_data:
  redis_data:

# ----------------------------
# Services
# ----------------------------
services:
  # ---------- Product Service ----------
  product-service:
    build: .
    container_name: product-service
    networks:
      - product-network
      - db-network  # can talk to MongoDB & Redis
    ports:
      - "${HOST_PORT}:${CONTAINER_PORT}"
    environment:
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILE}
      - SERVER_PORT=${CONTAINER_PORT}
      - SPRING_DATA_REDIS_HOST=${REDIS_HOST}
      - SPRING_DATA_REDIS_PORT=${REDIS_PORT}
      - SPRING_DATA_MONGODB_URI_DEV=${SPRING_DATA_MONGODB_URI_DEV}
      - SPRING_DATA_MONGODB_URI_PROD=${SPRING_DATA_MONGODB_URI_PROD}
    depends_on:
      redis:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    restart: unless-stopped

  # ---------- MongoDB ----------
  mongodb:
    image: mongo:7.0.5
    container_name: mongodb
    networks:
      - db-network
    ports:
      - "${MONGODB_PORT}:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGODB_DATABASE}
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./data/mongodb:/data/db
    restart: unless-stopped

  # ---------- Redis ----------
  redis:
    image: redis:7-alpine
    container_name: redis
    networks:
      - db-network
    ports:
      - "${REDIS_PORT}:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - redis_data:/data
    restart: unless-stopped

  # ---------- Prometheus ----------
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    networks:
      - monitoring-network
      - db-network  # if you want to scrape DB metrics
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    restart: unless-stopped

  # ---------- Grafana ----------
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    networks:
      - monitoring-network
      - db-network  # for DB metrics if needed
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
    depends_on:
      - prometheus
    restart: unless-stopped

  # ---------- Loki ----------
  loki:
    image: grafana/loki:latest
    container_name: loki
    networks:
      - monitoring-network
    ports:
      - "3100:3100"
    volumes:
      - ./loki-config.yml:/etc/loki/local-config.yaml
    command: -config.file=/etc/loki/local-config.yaml
    depends_on:
      - grafana
    restart: unless-stopped

  # ---------- Promtail ----------
  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    networks:
      - monitoring-network
    volumes:
      - ./promtail-config.yml:/etc/promtail/config.yml
      - ./logs:/var/log/app
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    restart: unless-stopped

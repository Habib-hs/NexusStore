# Ensure all tests pass before code reaches main branch
# Catches bugs early, validates business logic, prevents broken code
name: Product Service Tests

#  Run tests on every push to any branch + PRs targeting main
# Catch issues early on feature branches, validate before merging to main
on:
  push:
    branches: ['**']
    paths:
      - 'product-service/**'
      - '.github/workflows/product-service-tests.yml'
  pull_request:
    branches: [main]
    paths:
      - 'product-service/**'


jobs:
  test:
    name: Run All Tests
    runs-on: ubuntu-latest

    env:
      SPRING_DATA_MONGODB_URI_PROD: ${{ secrets.SPRING_DATA_MONGODB_URI_PROD }}
      SPRING_DATA_MONGODB_URI_DEV: ${{ secrets.SPRING_DATA_MONGODB_URI_DEV }}
      MONGODB_USERNAME: ${{ secrets.MONGODB_USERNAME }}
      MONGODB_PASSWORD: ${{ secrets.MONGODB_PASSWORD }}
      MONGODB_DATABASE: ${{ secrets.MONGODB_DATABASE }}
      MONGODB_PORT: ${{ secrets.MONGODB_PORT }}
      REDIS_HOST: ${{ secrets.REDIS_HOST }}
      REDIS_PORT: ${{ secrets.REDIS_PORT }}
      GRAFANA_ADMIN_PASSWORD: ${{ secrets.GRAFANA_ADMIN_PASSWORD }}
      HOST_PORT: ${{ secrets.HOST_PORT }}
      CONTAINER_PORT: ${{ secrets.CONTAINER_PORT }}
      SPRING_PROFILE: ${{ secrets.SPRING_PROFILE }}

    # ‚úÖ This applies to ALL steps in this job
    defaults:
      run:
        working-directory: ./product-service

    steps:
      # Get the latest code from repository
      # GitHub Actions need access to source code to run tests
      - name: Checkout code
        uses: actions/checkout@v4

      # Setup Java 17 environment
      # Spring Boot application requires Java 17 to compile and run
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Cache Maven dependencies to speed up builds
      # Avoids re-downloading same dependencies, reduces build time significantly
      # Build time goes from 4-5 minutes to 1-2 minutes
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('product-service/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      # Build the Spring Boot JAR before Docker Compose
      # Ensures the JAR file exists for the Docker build
      - name: Build Spring Boot JAR
        run: mvn clean package -DskipTests

      # Start all required services using docker-compose
      # Tests need MongoDB and other services to run properly
      # Uses existing docker-compose.yml configuration
      - name: Start all Services with Docker Compose
        run: |
          echo "üê≥ Starting services with docker-compose..."
          docker compose up -d
          echo "‚è≥ Waiting for services to be ready..."
          sleep 15

      # Verify services are running
      - name: Verify services are running
        run: docker compose ps

      # Run unit tests
      # Validates individual components work correctly (ProductService, ProductController)
      # Catches logic errors in business rules and API endpoints
      - name: Run Unit Tests
        run: |
          echo "üß™ Running unit tests..."
          mvn test -Dtest="*Test" -Dsurefire.failIfNoSpecifiedTests=false
          echo "‚úÖ Unit tests completed (or skipped if none found)"

      # Run integration tests
      # Tests that different parts of your app work together (Controller + Service + Database)
      # Catches issues in data flow and API integration
      - name: Run Integration Tests
        run: |
          echo "üîó Running integration tests..."
          mvn test -Dtest="*IT,*IntegrationTest" -Dsurefire.failIfNoSpecifiedTests=false
          echo "‚úÖ Integration tests completed (or skipped if none found)"

      # Run Spring Boot application tests
      # Tests complete application context loading and basic functionality
      # Your current ProductServiceApplicationTests.java falls into this category
      - name: Run Application Tests
        run: |
          echo "üå± Running Spring Boot application tests..."
          mvn test -Dtest="*Tests,*ApplicationTests" -Dsurefire.failIfNoSpecifiedTests=false
          echo "‚úÖ Application tests completed"

      # Run end-to-end tests
      # Tests complete user workflows from API call to database response
      # Ensures entire application works as expected from user perspective
      - name: Run End-to-End Tests
        run: |
          echo "üåê Running end-to-end tests..."
          mvn verify -Dsurefire.failIfNoSpecifiedTests=false
          echo "‚úÖ E2E tests completed (or skipped if none found)"

      # Generate test reports
      # Provides detailed information about test results
      - name: Generate Test Reports
        run: |
          echo "üìä Generating test reports..."
          mvn surefire-report:report
          echo "‚úÖ Test reports generated"
          echo "‚ÑπÔ∏è  JaCoCo skipped (plugin not configured in pom.xml)"

      # Clean up - stop docker services
      # Prevents resource usage after tests complete
      - name: Stop services
        if: always()
        run: |
          echo "üõë Stopping docker services..."
          docker compose down
          echo "‚úÖ Services stopped"
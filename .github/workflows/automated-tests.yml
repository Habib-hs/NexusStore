name: Automated Testing
# Ensure all tests pass before code reaches main branch
# Catches bugs early, validates business logic, prevents broken code

on:
  push:
    branches: ['**']
  pull_request:
    branches: [main]

jobs:
  test:
    name: Run All Tests
    runs-on: ubuntu-latest

    # ✅ This applies to ALL steps in this job
    defaults:
      run:
        working-directory: ./product-service

    steps:
      # Get the latest code from repository
      # GitHub Actions need access to source code to run tests
      - name: Checkout code
        uses: actions/checkout@v4

      # Setup Java 17 environment
      # Spring Boot application requires Java 17 to compile and run
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Cache Maven dependencies to speed up builds
      # Avoids re-downloading same dependencies, reduces build time significantly
      # Build time goes from 4-5 minutes to 1-2 minutes
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('product-service/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      # Start all required services using docker-compose
      # Tests need MongoDB and other services to run properly
      # Uses existing docker-compose.yml configuration
      - name: Start all Services with Docker Compose
        run: |
          echo "🐳 Starting services with docker-compose..."
          docker compose up -d
          echo "⏳ Waiting for services to be ready..."
          sleep 15

      # Verify services are running
      - name: Verify services are running
        run: docker compose ps

      # Check what test files exist (for debugging)
      - name: List test files
        run: |
          echo "📁 Checking for test files..."
          find src/test -name "*.java" 2>/dev/null || echo "No test directory found"
          ls -la src/test/java/ 2>/dev/null || echo "No src/test/java directory found"

      # Run all tests (simplified approach)
      # Runs all available tests regardless of naming pattern
      - name: Run All Tests
        run: |
          echo "🧪 Running all tests..."
          mvn test -Dsurefire.failIfNoSpecifiedTests=false
          echo "✅ Tests completed"

      # Generate test reports
      # Provides detailed information about test results and coverage
      # Helps identify which parts of code need more testing
      - name: Generate Test Reports
        run: |
          echo "📊 Generating test reports..."
          mvn surefire-report:report
          mvn jacoco:report
          echo "✅ Test reports generated"

      # Clean up - stop docker services
      # Prevents resource usage after tests complete
      - name: Stop services
        if: always()
        run: |
          echo "🛑 Stopping docker services..."
          docker compose down
          echo "✅ Services stopped"